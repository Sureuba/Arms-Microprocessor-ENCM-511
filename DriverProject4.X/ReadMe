Additional info:
1. Implement the above controller using the hardware kit and your code, which will be designed using
basic ANSI C commands; IO and Timer interrupts; and Display driver functions provided.

2. Use of polling and manufacturer-provided timer functions instead of interrupts will lose points.
• You may clear/set the LED within the timer ISR if you so choose
• You might find it useful to use Timer 1 and Timer 2

3. Function names: Students can use any convention when naming functions or organizing code.
• You should use #define’s to improve the readability of your code

4. Display instructions: All displays on the PC terminal window should be on a single line. Note that
display functions carried out at 32 kHz (300 Baud) can affect timer delays. Your code should account
for such delays when producing delays specified in the table above.

5. Interrupts: Interrupt ISR names are provided in the lecture slides. As specified in lecture, IO (CN
interrupts) are triggered on rising and falling edges seen on the input port. You might need to
implement some logic to “debounce” the button (e.g., receive an interrupt, read the button values,
delay for a little bit, and then re-read in case it is actually two or more buttons read) and “ignore”
button releases

                                               6. You should design your system such that your system will react to the button presses (e.g., you
should be able to change states (i.e., back to display “XXXX Mode: IDLE”) at any time). 
